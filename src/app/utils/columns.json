{
    "task": {
        "navigateKey": "task_taskType",
        "route": "task",
        "row": {
            "onClick": {
                "navigate": {
                    "subRoute": "~{params.task_taskType}",
                    "state":"~{params}",
                    "queryParams": {
                        "workflowId": "~{params.workflowId}",
                        "taskId": "~{params.task_taskId}",
                        "action": "execute",
                        "type": "workflow",
                        "selectedRole": "~{params.selectedRole.role}"
                    },
                    "appSetters": {
                        "setPhase": "execution",
                        "setWorkflowId": "~{params.workflowId}"
                    }
                }
            }
        },
        "columns": [
            {
                "headerName": "Workflow Name",
                "field": "workflowname",
                "flex":1,
                "class": "my-action-btn",
                "cellRenderer": "<div><a class=\"my-action-btn\">~{params.workflowName}</a></div>",
                "onClick1": {
                    "navigate": {
                        "subRoute": "workflow",
                        "queryParams": {
                            "id": "~{params.workflowId}",
                            "action": "execute",
                            "type": "workflow",
                            "selectedRole": "~{params.selectedRole.role}"
                        },
                        "appSetters": {
                            "setPhase": "execution",
                            "setWorkflowId": "~{params.workflowId}"
                        }
                    }
                }
            },
            {
                "headerName": "Task Name",
                "field": "task_taskName",
                "flex":2,
                "cellRenderer": "<div><a class=\"my-action-btn\">~{params.task_taskName}</a> </div>"
            },
            {
                "headerName": "Status",
                "field": "task_taskStatus",
                "flex":1,
                "defaultValue": "-",
                "cellRenderer": "<div><span class=\"task-status\">~{params.task_taskStatus}</span> </div>"
            },
            {
                "headerName": "Action",
                "field": "action",
                "flex":2,
                "cellRenderer": "<div><button id='rejectTaskBtn' class='btn btn-outline-danger reject-btn ~{params.task_taskStatus === 'inProgress'? 'disabled': ''}'>Reject</button><button id ='selectTaskBtn' class='btn btn-primary select-btn  ~{params.task_taskStatus === 'inProgress'? 'disabled': ''}'>Select</button></div>",
                "onClick": {
                    "clickHandler": {
                        "tarketKey": "id",
                        "targetIds": [
                            "rejectTaskBtn",
                            "selectTaskBtn"
                        ],
                        "api": {
                            "rejectTaskBtn": {
                                "url": "/taskAction",
                                "method": "POST",
                                "payload": {
                                    "workflowId": "~{params.workflowId}",
                                    "taskId": "~{params.task_taskId}",
                                    "assignedTo": "~{params.user}",
                                    "selected": "~{params.selected = params.targetId === 'selectTaskBtn'}",
                                    "rejected": "~{params.rejected = params.targetId === 'rejectTaskBtn'}",
                                    "rejectedReason": "~{params.rejectedReason || 'i do not need it'}"
                                },
                                "onSuccess": {
                                    "message": "Task rejected from your queue successfully with ~{params.rejectedReason || ''}",
                                    "title": "Task Rejected"
                                },
                                "onFailure": {
                                    "message": "Something went wrong Please try again",
                                    "title": "Task Rejected failed",
                                    "type": "rejected"
                                }
                            },
                            "selectTaskBtn": {
                                "url": "/taskAction",
                                "method": "POST",
                                "payload": {
                                    "workflowId": "~{params.workflowId}",
                                    "taskId": "~{params.task_taskId}",
                                    "assignedTo": "~{params.user}",
                                    "selected": "~{params.selected = params.targetId === 'selectTaskBtn'}",
                                    "rejected": "~{params.rejected = params.targetId === 'rejectTaskBtn'}",
                                    "rejectedReason": "~{params.rejectedReason || ''}"
                                },
                                "onSuccess": {
                                    "message": "Task selected from your queue successfully"
                                },
                                "onFailure": {
                                    "message": "Something went wrong Please try again"
                                }
                            }
                        }
                    }
                }
            },
            {
                "headerName": "Due By",
                "headerComponent": true,
                "headerComponentTemplate": "<div class='d-flex align-items-center'> <span class='text-white'>Due By</span> <span class='red-signal signals'></span> <span class='yellow-signal signals'></span> <span class='green-signal signals'></span></div>",
                "field": "task_taskEndDate",
                "flex":2,
                "cellRenderer": "<div><span class=\"task-end-date \">~{params.task_taskEndDate}</span> <span class=\"signals ~{params.taskEndDateSignal} \"></span> </div>"
            }
        ]
    }
}